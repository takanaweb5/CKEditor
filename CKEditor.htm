<script src="https://cdn.ckeditor.com/4.22.1/full-all/ckeditor.js"></script>
<form>
  <textarea name="editor1" id="editor1"></textarea>
</form>

<script>
  //ファイルを開くボタン押下時のファイル読込み処理
  function onOpenFileChange(event) {
    const file = event.target.files[0];
    if (file) {
      filename = file.name;
      const reader = new FileReader();
      reader.readAsText(file);
      reader.onload = () => {
        editor.setData(reader.result);
      };
    }
  }

  //ファイルを開くボタン押下処理
  function OpenFile(editor) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'text/html';
    input.setAttribute('onchange', 'onOpenFileChange(event)');
    input.click();
  }

  //保存ボタン押下処理
  function SaveFile(editor) {
    const a = document.createElement('a');
    a.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(editor.getData());
    a.download = filename;
    a.click();
  }

  let filename = '';
  //警告を非表示
  CKEDITOR.config.versionCheck = false;
  //インデント（字下げ）の単位を1文字に変更する
  CKEDITOR.config.indentUnit = 'em';
  CKEDITOR.config.indentOffset = 1;
  //スキンを適用し、見た目を変更する
  CKEDITOR.config.skin = 'moono';
  //ユーザ定義のCSSを適用する
  CKEDITOR.config.contentsCss = ['./style.css'];
  //HTMLタグとスタイルの制限を解除
  CKEDITOR.config.allowedContent = true;

  // カスタムボタンプラグインの登録
  CKEDITOR.plugins.add('customButtons', {
    init: function (editor) {
      // エディタの準備が完了したら実行
      editor.on('instanceReady', function () {
        // 保存ボタンのコマンドを上書き
        if (editor.commands.save) {
          editor.commands.save.exec = function () {
            SaveFile(editor);
          };
        }

        // エディタを最大化
        editor.execCommand('maximize');
      });

      // フォントサイズ調整機能（em単位でdirection分ずつ）
      function AdjustFontSize(editor, direction) {
        // フォントサイズ調整の共通関数（ローカル関数）
        function adjustElementFontSize(element, direction, sourceElement = null) {
          const currentSize = getCurrentFontSize(sourceElement || element);
          const newSize = currentSize + direction;
          const clampedSize = Math.max(0.5, Math.min(5.0, newSize));
          element.setStyle('font-size', clampedSize.toFixed(1) + 'em');
        }

        // 直近のインライン要素（SPAN、STRONG、S、U、EM）を探す関数
        function findClosestSpan(node) {
          let element = node.type === CKEDITOR.NODE_TEXT ? node.getParent() : node;
          while (element && element.type === CKEDITOR.NODE_ELEMENT) {
            const tagName = element.getName();
            if (['span', 'strong', 's', 'u', 'b', 'em'].includes(tagName)) {
              return element;
            }
            element = element.getParent();
          }
          return null; // 対象タグが見つからない場合
        }

        // 選択範囲が単一のSPAN要素と完全に一致するかどうかをチェックする関数
        function isSelectionMatchingSpan(range) {
          const startContainer = range.startContainer;
          const endContainer = range.endContainer;
          if (startContainer.type === CKEDITOR.NODE_ELEMENT
            && endContainer.type === CKEDITOR.NODE_ELEMENT) {
            // SPANのみをチェック（他のインライン要素は新しいSPANで囲む）
            const startSpan = startContainer.getName() === 'span' ? startContainer : null;
            const endSpan = endContainer.getName() === 'span' ? endContainer : null;
            return !!(startSpan && endSpan && startSpan.equals(endSpan));
          }
          return false; // 選択範囲がSPAN要素と一致しない場合
        }

        // 現在のフォントサイズを取得（em単位で返す）
        function getCurrentFontSize(node) {
          let element = node.type === CKEDITOR.NODE_TEXT ? node.getParent() : node;
          while (element && element.type === CKEDITOR.NODE_ELEMENT) {
            const fontSize = element.getStyle('font-size');
            if (fontSize) {
              // font-sizeが見つかったら単位を変換してem値で返す
              if (fontSize.includes('em')) return parseFloat(fontSize);
              if (fontSize.includes('px')) return parseFloat(fontSize) / 16;
              if (fontSize.includes('%')) return parseFloat(fontSize) / 100;
            }
            element = element.getParent();
          }
          return 1.0; // デフォルトサイズ（1em）
        }

        // 新しいSPANで囲む共通処理
        function wrapWithNewSpan(targetRange, direction, sourceElement) {
          const contents = targetRange.extractContents();
          const span = new CKEDITOR.dom.element('span');

          // 現在のフォントサイズを取得して新しいSPANに設定
          adjustElementFontSize(span, direction, sourceElement);

          span.append(contents);
          targetRange.insertNode(span);

          // DOM操作後の同期待機（CKEditorのDOM更新完了を確実に待つ）
          setTimeout(() => {
            // 挿入したSPANの内容を再選択（次回の操作で既存SPANとして認識されるように）
            const finalRange = editor.createRange();
            finalRange.selectNodeContents(span);
            selection.selectRanges([finalRange]);
          }, 0); // 次のイベントループで実行
        }

        const selection = editor.getSelection();
        const ranges = selection.getRanges();
        if (ranges.length === 0) return;

        for (let i = 0; i < ranges.length; i++) {
          const range = ranges[i];

          if (range.collapsed) {
            // 選択範囲がない場合、直近のインライン要素を探す
            const startContainer = range.startContainer;
            const closestSpan = findClosestSpan(startContainer);

            if (closestSpan) {
              // 対象タグが見つかった場合、そのタグの範囲を選択
              const newRange = editor.createRange();
              newRange.selectNodeContents(closestSpan);

              if (closestSpan.getName() === 'span') {
                // 直近のタグがSPANの場合は、既存のSPANのfont-sizeを調整
                adjustElementFontSize(closestSpan, direction);

                // 既存のSPANを再選択
                selection.selectRanges([newRange]);
              } else {
                // 直近のタグがSPAN以外の場合は、新しいSPANで囲む
                wrapWithNewSpan(newRange, direction, closestSpan);
              }
            }
          } else {
            // 選択範囲がある場合
            // 選択範囲がSPAN要素と完全に一致するかチェック
            if (isSelectionMatchingSpan(range)) {
              // 選択範囲がSPAN要素と一致する場合、そのタグのfont-sizeを調整
              adjustElementFontSize(range.startContainer, direction);
            } else {
              // 選択範囲がSPAN要素と一致しない場合、新しいSPANを作成
              wrapWithNewSpan(range, direction, range.startContainer);
            }
          }
        }
      }

      // フォントサイズ拡大機能
      function IncreaseFontSize(editor) {
        AdjustFontSize(editor, 0.1);
      }
      // フォントサイズ縮小機能
      function DecreaseFontSize(editor) {
        AdjustFontSize(editor, -0.1);
      }

      //ファイルを開くボタンを追加する
      editor.ui.addButton('openFile', {
        label: 'ファイルを開く',
        command: 'openFile',
        toolbar: 'document,3',  //ボタンを追加するtoolbarと位置を指定
        icon: 'https://icongr.am/fontawesome/folder-open-o.svg'
      });
      editor.addCommand('openFile', { exec: OpenFile });

      //フォントサイズ拡大ボタンを追加する
      editor.ui.addButton('increaseFontSize', {
        label: 'フォントサイズ拡大',
        command: 'increaseFontSize',
        toolbar: 'basicstyles,1',  //ボタンを追加するtoolbarと位置を指定
      });
      editor.addCommand('increaseFontSize', { exec: IncreaseFontSize });

      //フォントサイズ縮小ボタンを追加する
      editor.ui.addButton('decreaseFontSize', {
        label: 'フォントサイズ縮小',
        command: 'decreaseFontSize',
        toolbar: 'basicstyles,2',  //ボタンを追加するtoolbarと位置を指定
      });
      editor.addCommand('decreaseFontSize', { exec: DecreaseFontSize });
    }
  });

  // エディタの初期化（extraPluginsでカスタムプラグインを有効化）
  CKEDITOR.replace('editor1', { extraPlugins: 'customButtons' });

  //ウィンドウを閉じる時に確認メッセージを表示させる
  window.addEventListener('beforeunload', function (event) {
    event.preventDefault();
    event.returnValue = '';
  });
</script>
<style>
  .cke_button_icon.cke_button__increaseFontSize_icon {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3E%3Ctext x='0' y='14' font-family='Arial,sans-serif' font-size='14' font-weight='bold' fill='%23666'%3EA%3C/text%3E%3Ctext x='11' y='6' font-family='Arial,sans-serif' font-size='7' font-weight='bold' fill='%23666'%3E%2B%3C/text%3E%3C/svg%3E");
  }

  .cke_button_icon.cke_button__decreaseFontSize_icon {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3E%3Ctext x='0' y='14' font-family='Arial,sans-serif' font-size='14' font-weight='bold' fill='%23666'%3EA%3C/text%3E%3Ctext x='11' y='8' font-family='Arial,sans-serif' font-size='7' font-weight='bold' fill='%23666'%3E%E2%88%92%3C/text%3E%3C/svg%3E");
  }
</style>